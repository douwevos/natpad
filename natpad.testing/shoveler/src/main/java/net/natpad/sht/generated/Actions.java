/* generated by natpad.cup Tue May 29 21:31:16 CEST 2012 */
package net.natpad.sht.generated;

import java.util.Vector;
import net.natpad.sht.generated.runtime.LrParserContext;
import net.natpad.sht.generated.runtime.LrSymbol;
import net.natpad.sht.model.BlockValue;
import net.natpad.sht.model.ListValue;
import net.natpad.sht.model.Model;
import net.natpad.sht.model.Reference;
import net.natpad.sht.model.SimpleValue;
import net.natpad.sht.model.Template;
import net.natpad.sht.model.TemplateArgument;
import net.natpad.sht.model.TemplateCall;
import net.natpad.sht.model.Value;

public class Actions {


	Actions() {
	}

	/** Method with the actual generated action code. */
	public final LrSymbol runAction(LrParserContext cupContext, int cupActionId) throws Exception {
		/* Symbol object for return from actions */
		LrSymbol cupResult;

		/* select the action based on the action number */
		switch (cupActionId) {
			case 0: { // $START ::= sht_file EOF 
				Object RESULT = null;
				LrSymbol cupstart_val = cupContext.getFromTop(1);
				Model start_val = (Model) cupstart_val.value;
				RESULT = start_val;
				cupResult = new LrSymbol(0/*$START*/, RESULT);
			}
			/* ACCEPT */
			cupContext.doneParsing();
			return cupResult;

			case 1: { // sht_file ::= sht_block 
				Model RESULT = null;
				LrSymbol cupb = cupContext.getFromTop(0);
				Model b = (Model) cupb.value;
				RESULT=b;
				cupResult = new LrSymbol(8/*sht_file*/, RESULT);
			}
			return cupResult;

			case 2: { // sht_block ::= template_def 
				Model RESULT = null;
				LrSymbol cupd = cupContext.getFromTop(0);
				Template d = (Template) cupd.value;
				RESULT = new Model(); RESULT.add(d);
				cupResult = new LrSymbol(7/*sht_block*/, RESULT);
			}
			return cupResult;

			case 3: { // sht_block ::= reference 
				Model RESULT = null;
				LrSymbol cupr = cupContext.getFromTop(0);
				Reference r = (Reference) cupr.value;
				RESULT = new Model(); RESULT.add(r);
				cupResult = new LrSymbol(7/*sht_block*/, RESULT);
			}
			return cupResult;

			case 4: { // sht_block ::= sht_block template_def 
				Model RESULT = null;
				LrSymbol cupb = cupContext.getFromTop(1);
				Model b = (Model) cupb.value;
				LrSymbol cupd = cupContext.getFromTop(0);
				Template d = (Template) cupd.value;
				RESULT = b; RESULT.add(d);
				cupResult = new LrSymbol(7/*sht_block*/, RESULT);
			}
			return cupResult;

			case 5: { // sht_block ::= sht_block reference 
				Model RESULT = null;
				LrSymbol cupb = cupContext.getFromTop(1);
				Model b = (Model) cupb.value;
				LrSymbol cupr = cupContext.getFromTop(0);
				Reference r = (Reference) cupr.value;
				RESULT = b; RESULT.add(r);
				cupResult = new LrSymbol(7/*sht_block*/, RESULT);
			}
			return cupResult;

			case 6: { // template_def ::= ID LPARREN template_arguments RPARREN SEMICOLON 
				Template RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(4);
				String i = (String) cupi.value;
				LrSymbol cupargs = cupContext.getFromTop(2);
				Vector args = (Vector) cupargs.value;

				RESULT = new Template(i);
				for(int idx=0; idx<args.size(); idx++) {
				TemplateArgument arg = (TemplateArgument) args.get(idx);
				RESULT.add(arg);
				}

				cupResult = new LrSymbol(9/*template_def*/, RESULT);
			}
			return cupResult;

			case 7: { // template_def ::= ID LPARREN RPARREN SEMICOLON 
				Template RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(3);
				String i = (String) cupi.value;
				RESULT = new Template(i);
				cupResult = new LrSymbol(9/*template_def*/, RESULT);
			}
			return cupResult;

			case 8: { // template_arguments ::= template_arg 
				Vector RESULT = null;
				LrSymbol cuparg = cupContext.getFromTop(0);
				TemplateArgument arg = (TemplateArgument) cuparg.value;
				RESULT = new Vector(); RESULT.add(arg);
				cupResult = new LrSymbol(11/*template_arguments*/, RESULT);
			}
			return cupResult;

			case 9: { // template_arguments ::= template_arguments COMMA template_arg 
				Vector RESULT = null;
				LrSymbol cupargs = cupContext.getFromTop(2);
				Vector args = (Vector) cupargs.value;
				LrSymbol cuparg = cupContext.getFromTop(0);
				TemplateArgument arg = (TemplateArgument) cuparg.value;
				RESULT = args; RESULT.add(arg);
				cupResult = new LrSymbol(11/*template_arguments*/, RESULT);
			}
			return cupResult;

			case 10: { // template_arg ::= ID 
				TemplateArgument RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(0);
				String i = (String) cupi.value;
				RESULT=new TemplateArgument(i);
				cupResult = new LrSymbol(10/*template_arg*/, RESULT);
			}
			return cupResult;

			case 11: { // template_arg ::= ID value 
				TemplateArgument RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(1);
				String i = (String) cupi.value;
				LrSymbol cupe = cupContext.getFromTop(0);
				Value e = (Value) cupe.value;
				RESULT=new TemplateArgument(i); RESULT.setDefault(e);
				cupResult = new LrSymbol(10/*template_arg*/, RESULT);
			}
			return cupResult;

			case 12: { // reference_block ::= reference_block reference 
				BlockValue RESULT = null;
				LrSymbol cuprb = cupContext.getFromTop(1);
				BlockValue rb = (BlockValue) cuprb.value;
				LrSymbol cupref = cupContext.getFromTop(0);
				Reference ref = (Reference) cupref.value;
				RESULT=rb; rb.add(ref);
				cupResult = new LrSymbol(5/*reference_block*/, RESULT);
			}
			return cupResult;

			case 13: { // reference_block ::= reference 
				BlockValue RESULT = null;
				LrSymbol cupref = cupContext.getFromTop(0);
				Reference ref = (Reference) cupref.value;
				RESULT=new BlockValue(); RESULT.add(ref);
				cupResult = new LrSymbol(5/*reference_block*/, RESULT);
			}
			return cupResult;

			case 14: { // reference ::= block_reference 
				Reference RESULT = null;
				LrSymbol cupr = cupContext.getFromTop(0);
				Reference r = (Reference) cupr.value;
				RESULT=r;
				cupResult = new LrSymbol(16/*reference*/, RESULT);
			}
			return cupResult;

			case 15: { // reference ::= property_reference 
				Reference RESULT = null;
				LrSymbol cupr = cupContext.getFromTop(0);
				Reference r = (Reference) cupr.value;
				RESULT=r;
				cupResult = new LrSymbol(16/*reference*/, RESULT);
			}
			return cupResult;

			case 17: { // simple_reference ::= ID simple_value SEMICOLON 
				Reference RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(2);
				String i = (String) cupi.value;
				LrSymbol cupv = cupContext.getFromTop(1);
				SimpleValue v = (SimpleValue) cupv.value;
				RESULT = new Reference(i); RESULT.setValue(v);
				cupResult = new LrSymbol(13/*simple_reference*/, RESULT);
			}
			return cupResult;

			case 16: { // reference ::= simple_reference 
				Reference RESULT = null;
				LrSymbol cupr = cupContext.getFromTop(0);
				Reference r = (Reference) cupr.value;
				RESULT=r;
				cupResult = new LrSymbol(16/*reference*/, RESULT);
			}
			return cupResult;

			case 19: { // block_reference ::= ID list_value 
				Reference RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(1);
				String i = (String) cupi.value;
				LrSymbol cups = cupContext.getFromTop(0);
				ListValue s = (ListValue) cups.value;
				RESULT = new Reference(i); RESULT.setValue(s);
				cupResult = new LrSymbol(14/*block_reference*/, RESULT);
			}
			return cupResult;

			case 18: { // block_reference ::= ID block_value 
				Reference RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(1);
				String i = (String) cupi.value;
				LrSymbol cups = cupContext.getFromTop(0);
				BlockValue s = (BlockValue) cups.value;
				RESULT = new Reference(i); RESULT.setValue(s);
				cupResult = new LrSymbol(14/*block_reference*/, RESULT);
			}
			return cupResult;

			case 21: { // block_value ::= template_call block_body 
				BlockValue RESULT = null;
				LrSymbol cuptc = cupContext.getFromTop(1);
				TemplateCall tc = (TemplateCall) cuptc.value;
				LrSymbol cupb = cupContext.getFromTop(0);
				BlockValue b = (BlockValue) cupb.value;
				RESULT = b; b.setTemplateCall(tc);
				cupResult = new LrSymbol(4/*block_value*/, RESULT);
			}
			return cupResult;

			case 20: { // property_reference ::= ID ASSIGN_VALUE_EOL 
				Reference RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(1);
				String i = (String) cupi.value;
				LrSymbol cupv = cupContext.getFromTop(0);
				String v = (String) cupv.value;
				SimpleValue sv = new SimpleValue(v); RESULT=new Reference(i); RESULT.setValue(sv);
				cupResult = new LrSymbol(15/*property_reference*/, RESULT);
			}
			return cupResult;

			case 23: { // list_value ::= LBRACE values RBRACE 
				ListValue RESULT = null;
				LrSymbol cupel = cupContext.getFromTop(1);
				ListValue el = (ListValue) cupel.value;
				RESULT=el;
				cupResult = new LrSymbol(3/*list_value*/, RESULT);
			}
			return cupResult;

			case 22: { // block_value ::= block_body 
				BlockValue RESULT = null;
				LrSymbol cupb = cupContext.getFromTop(0);
				BlockValue b = (BlockValue) cupb.value;
				RESULT = b;
				cupResult = new LrSymbol(4/*block_value*/, RESULT);
			}
			return cupResult;

			case 25: { // template_call ::= ID LPARREN values RPARREN 
				TemplateCall RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(3);
				String i = (String) cupi.value;
				LrSymbol cupel = cupContext.getFromTop(1);
				ListValue el = (ListValue) cupel.value;
				RESULT = new TemplateCall(i); RESULT.setArgumentList(el);
				cupResult = new LrSymbol(12/*template_call*/, RESULT);
			}
			return cupResult;

			case 24: { // template_call ::= ID LPARREN RPARREN 
				TemplateCall RESULT = null;
				LrSymbol cupi = cupContext.getFromTop(2);
				String i = (String) cupi.value;
				RESULT = new TemplateCall(i);
				cupResult = new LrSymbol(12/*template_call*/, RESULT);
			}
			return cupResult;

			case 27: { // block_body ::= LBRACE reference_block RBRACE 
				BlockValue RESULT = null;
				LrSymbol cupnb = cupContext.getFromTop(1);
				BlockValue nb = (BlockValue) cupnb.value;
				RESULT = nb;
				cupResult = new LrSymbol(6/*block_body*/, RESULT);
			}
			return cupResult;

			case 26: { // block_body ::= LBRACE RBRACE 
				BlockValue RESULT = null;
				RESULT = new BlockValue();
				cupResult = new LrSymbol(6/*block_body*/, RESULT);
			}
			return cupResult;

			case 29: { // values ::= value 
				ListValue RESULT = null;
				LrSymbol cupe = cupContext.getFromTop(0);
				Value e = (Value) cupe.value;
				RESULT = new ListValue(); RESULT.add(e);
				cupResult = new LrSymbol(2/*values*/, RESULT);
			}
			return cupResult;

			case 28: { // values ::= values COMMA value 
				ListValue RESULT = null;
				LrSymbol cupel = cupContext.getFromTop(2);
				ListValue el = (ListValue) cupel.value;
				LrSymbol cupe = cupContext.getFromTop(0);
				Value e = (Value) cupe.value;
				RESULT=el; el.add(e);
				cupResult = new LrSymbol(2/*values*/, RESULT);
			}
			return cupResult;

			case 31: { // value ::= list_value 
				Value RESULT = null;
				LrSymbol cups = cupContext.getFromTop(0);
				ListValue s = (ListValue) cups.value;
				RESULT=s;
				cupResult = new LrSymbol(1/*value*/, RESULT);
			}
			return cupResult;

			case 30: { // value ::= block_value 
				Value RESULT = null;
				LrSymbol cups = cupContext.getFromTop(0);
				BlockValue s = (BlockValue) cups.value;
				RESULT=s;
				cupResult = new LrSymbol(1/*value*/, RESULT);
			}
			return cupResult;

			case 34: { // simple_value ::= NUMBER 
				SimpleValue RESULT = null;
				LrSymbol cups = cupContext.getFromTop(0);
				String s = (String) cups.value;

				RESULT = new SimpleValue(s);

				cupResult = new LrSymbol(17/*simple_value*/, RESULT);
			}
			return cupResult;

			case 35: { // simple_value ::= NIL 
				SimpleValue RESULT = null;

				RESULT = new SimpleValue(null);

				cupResult = new LrSymbol(17/*simple_value*/, RESULT);
			}
			return cupResult;

			case 32: { // value ::= simple_value 
				Value RESULT = null;
				LrSymbol cupv = cupContext.getFromTop(0);
				SimpleValue v = (SimpleValue) cupv.value;
				RESULT=v;
				cupResult = new LrSymbol(1/*value*/, RESULT);
			}
			return cupResult;

			case 33: { // simple_value ::= STRING 
				SimpleValue RESULT = null;
				LrSymbol cups = cupContext.getFromTop(0);
				String s = (String) cups.value;

				RESULT = new SimpleValue(s);

				cupResult = new LrSymbol(17/*simple_value*/, RESULT);
			}
			return cupResult;

			default:
				throw new Exception("Invalid action number found in internal parse table");
			}
		}

}
