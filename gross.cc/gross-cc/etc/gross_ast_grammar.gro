terminal IDENTIFIER, LSQBRACK, RSQBRACK, LCUBRACK, RCUBRACK, LPAREN, RPAREN, TYPE, STRING, EXTENDS, SEMI, FORWARD, INDEX_MARK, AST, ARGUMENT, COMMA;
terminal METHOD, CODE_TEXT, RETURN, AS, IMPLEMENT;


spec                 ⟶ type_defs:type_defs ast_lines:ast_lines ;


type_defs ≣ r ⟶ type_defs:type_defs type_def:type_def
              ⟶;


type_def ⟶ TYPE STRING:description;


ast_lines ≣ r        ⟶ ast_lines : ast_lines ast_line : ast_line 
          ≣ b        ⟶ ast_line : ast_line ;


ast_line  ≣ a           ⟶ rule_ref_list:rule_ref_list ast_type_description:description SEMI
          ≣ b           ⟶ rule_ref_list:rule_ref_list type_description:description SEMI
          ≣ f           ⟶ rule_ref_list:rule_ref_list fwd_type_description:description SEMI;



ast_type_description     ⟶ AST type_def:type_def opt_extends:opt_extends opt_as:opt_as body:body;

opt_as     ≣ b             ⟶ AS name:name
                        ⟶ ;

type_description         ⟶ type_def:type_def ;

fwd_type_description     ⟶ FORWARD type_def:type_def;


opt_extends ≣ b         ⟶ EXTENDS STRING : extendsTypeName
                     ⟶ ;

body                 ≣ b ⟶ LCUBRACK body_statements:body_statements RCUBRACK
                         ⟶ ;


body_statements      ≣ r ⟶ body_statements:body_statements body_statement:body_statement
                         ⟶ ;


body_statement       ≣ arg    ⟶ ARGUMENT STRING:type_name COMMA STRING:label COMMA STRING:value
                     ≣ met   ⟶ METHOD name:method_name opt_return:opt_return CODE_TEXT:code_text
                     ≣ if   ⟶ IMPLEMENT name:type_name CODE_TEXT:code_text;

rule_ref_list        ≣ r ⟶  rule_ref_list:rule_ref_list rule_ref:rule_ref
                     ≣ b ⟶  rule_ref:rule_ref
                      ;


opt_return ≣ b ⟶  RETURN name:type_name
             ⟶ ;

rule_ref             ≣ b ⟶  IDENTIFIER:lhs_name
                      ≣ m ⟶  IDENTIFIER:lhs_name INDEX_MARK IDENTIFIER:label;


name                 ≣ b ⟶ IDENTIFIER:id
                     ≣ s ⟶ STRING:id;


imports ｟

import net.natpad.gross.ast.bnf.*;

｠


type AstFile spec;
type AstLines ast_lines;
type AstLine ast_line;
type AstTypeDescription ast_type_description;
type ForwardTypeDescription fwd_type_description;
type TypeDescription type_description;
type String opt_extends;
type String IDENTIFIER, STRING, name, CODE_TEXT, opt_return, opt_as;
type RuleRef rule_ref;
type RuleRefList rule_ref_list;
type TypeDefs type_defs;
type TypeDef type_def;
type BodyStatements body_statements, body;
type BodyStatement body_statement;



code spec                    ｟				result = new AstFile(type_defs, ast_lines); ｠

code type_defs ≣ r           ｟				result = new TypeDefs(type_defs, type_def); ｠

code type_def                ｟				result = new TypeDef(description); ｠


code ast_lines ≣ r           ｟				result = new AstLines(ast_lines, ast_line); ｠
code ast_lines ≣ b           ｟				result = new AstLines(null, ast_line); ｠

code ast_line  ≣ a           ｟				result = new AstLine(rule_ref_list, description); ｠
code ast_line  ≣ b           ｟				result = new AstLine(rule_ref_list, description); ｠
code ast_line  ≣ f           ｟				result = new AstLine(rule_ref_list, description); ｠

code ast_type_description    ｟				result = new AstTypeDescription(type_def, opt_extends, opt_as, body); ｠

code opt_extends ≣ b         ｟				result = extendsTypeName; ｠
code opt_as ≣ b              ｟				result = name; ｠

code type_description        ｟				result = new TypeDescription(type_def); ｠

code fwd_type_description    ｟				result = new ForwardTypeDescription(type_def); ｠

code rule_ref_list ≣ r       ｟				result = new RuleRefList(rule_ref_list, rule_ref); ｠
code rule_ref_list ≣ b       ｟				result = new RuleRefList(null, rule_ref); ｠

code rule_ref ≣ b            ｟				result = new RuleRef(lhs_name, null); ｠
code rule_ref ≣ m            ｟				result = new RuleRef(lhs_name, label); ｠


code body ≣ b                ｟				result = body_statements; ｠
code body_statements ≣ r     ｟				result = new BodyStatements(body_statements, body_statement); ｠

code body_statement ≣ arg    ｟				result = new BodyArgumentStatement(type_name, label, value); ｠
code body_statement ≣ met    ｟				result = new BodyMethodStatement(method_name, code_text, opt_return); ｠
code body_statement ≣ if     ｟				result = new BodyImplementStatement(type_name, code_text); ｠


code opt_return ≣ b          ｟				result = type_name; ｠

code name ≣ b                ｟				result = id; ｠
code name ≣ s                ｟				result = id; ｠








