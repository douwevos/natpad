terminal SEMI, RULE_SEPERATOR, IDENTIFIER, COLON, COMMA;
terminal TERMINAL, STAR, PLUS, EXCL, BAR, INDEX_MARK, CODE, CODE_TEXT, NUMBER, IMPORTS, TYPE;
terminal LPAREN, RPAREN, LSQBRACK, RSQBRACK, LCUBRACK, RCUBRACK, AST, COLON_DOT;


spec                  ≣ f ⟶ term_decl_list:td  production_list:pl  imports_code:im  type_definition_list:tl  code_definition_list:cl
                      ≣ b ⟶ term_decl_list:td  production_list:pl
                      ≣ r ⟶ term_decl_list:td  production_list:pl  ast_descriptions:ast_descriptions
						;

term_decl_list        ≣ l ⟶ term_decl_list:tdlist term_decl:td
                          ⟶ ;

term_decl             ≣ b ⟶ TERMINAL ids:ids SEMI
                          ⟶ TERMINAL ⊗ SEMI;

ids                   ≣ l ⟶ ids:ids COMMA IDENTIFIER:id
                      ≣ s ⟶ IDENTIFIER:id;






production_list       ≣ l ⟶ production_list:plist production:prod
                      ≣ s ⟶ production:prod ;

production                ⟶ IDENTIFIER:lhsName rhs_rule_list:ruleList SEMI;

rhs_rule_list         ≣ l ⟶ rhs_rule_list:ruleList rhs_rule:rule
                      ≣ s ⟶ rhs_rule:rule;

rhs_rule              ≣ b ⟶ RULE_SEPERATOR rhs_rule_part_list:rulePartList
                      ≣ m ⟶ INDEX_MARK IDENTIFIER:imark RULE_SEPERATOR rhs_rule_part_list:rulePartList;

rhs_rule_part_list    ≣ l ⟶ rhs_rule_part_list:rulePartList rhs_rule_part:rulePart
                          ⟶ ;

rhs_rule_part             ⟶ rhs_entry_complete:entry;

rhs_entry_complete    ≣ b ⟶ rhs_entry:entry
                      ≣ s ⟶ rhs_entry:entry STAR
                      ≣ p ⟶ rhs_entry:entry PLUS
                      ≣ e ⟶ rhs_entry:entry EXCL;

rhs_entry             ≣ s ⟶ LPAREN rhs_sub_list:sub RPAREN
                      ≣ o ⟶ LSQBRACK rhs_sub_list:entry RSQBRACK
                      ≣ b ⟶ rhs_name_entry ;

rhs_name_entry        ≣ b ⟶ IDENTIFIER:symName
                      ≣ l ⟶ IDENTIFIER:symName COLON IDENTIFIER:label
                      ≣ s ⟶ IDENTIFIER:symName COLON_DOT ;
                      

opt_label             ≣ b ⟶ COLON IDENTIFIER:label
                          ⟶ ;

rhs_sub_list          ≣ l ⟶ rhs_sub_list:subList BAR rhs_sub:sub
                      ≣ s ⟶ rhs_sub:sub;

rhs_sub               ≣ l ⟶ rhs_sub:sub rhs_entry_complete:entry
                      ≣ s ⟶ rhs_entry_complete:entry;



imports_code              ⟶ IMPORTS CODE_TEXT:ct;



type_definition_list  ≣ l ⟶ type_definition_list:tdList  type_definition:typeDef
                          ⟶ ;


type_definition           ⟶ TYPE IDENTIFIER:symtype ids:symids SEMI;

code_definition_list  ≣ l ⟶ code_definition_list:cdList code_definition:codeDef
                          ⟶ ;

code_definition           ⟶ CODE prod_rule_ref:ruleRef CODE_TEXT:codeText;

prod_rule_ref         ≣ b ⟶  IDENTIFIER:lhsName
                      ≣ m ⟶  IDENTIFIER:lhsName INDEX_MARK IDENTIFIER:label
                      ≣ n ⟶  IDENTIFIER:lhsName INDEX_MARK NUMBER:offset;


ast_descriptions          ⟶ ast_descriptions:link ast_description:rule ;

ast_description           ⟶ AST prod_rule_ref:ruleRef CODE_TEXT:codeText ;

imports ｟
import net.natpad.gross.definition.bnf.CodeDefinition;
import net.natpad.gross.definition.bnf.CodeDefinitionList;
import net.natpad.gross.definition.bnf.IdList;
import net.natpad.gross.definition.bnf.Imports;
import net.natpad.gross.definition.bnf.ProductionDefinition;
import net.natpad.gross.definition.bnf.ProductionDefinitionList;
import net.natpad.gross.definition.bnf.ProductionRuleReference;
import net.natpad.gross.definition.bnf.RhsRule;
import net.natpad.gross.definition.bnf.RhsRuleList;
import net.natpad.gross.definition.bnf.RhsRulePart;
import net.natpad.gross.definition.bnf.RhsRulePartList;
import net.natpad.gross.definition.bnf.RhsSub;
import net.natpad.gross.definition.bnf.RhsSubList;
import net.natpad.gross.definition.bnf.RhsSymbolPart;
import net.natpad.gross.definition.bnf.RhsUnaryPart;
import net.natpad.gross.definition.bnf.RhsUnaryPart.UnaryOpp;
import net.natpad.gross.definition.bnf.Specification;
import net.natpad.gross.definition.bnf.TerminalDeclaration;
import net.natpad.gross.definition.bnf.TerminalDeclarationList;
import net.natpad.gross.definition.bnf.TypeDefinition;
import net.natpad.gross.definition.bnf.TypeDefinitionList;
import net.natpad.gross.definition.bnf.AstDescriptionList;
import net.natpad.gross.definition.bnf.AstDescription;
｠


type TerminalDeclarationList term_decl_list;
type TerminalDeclaration term_decl;
type IdList ids;
type ProductionDefinitionList production_list;
type ProductionDefinition production;
type RhsRuleList rhs_rule_list;
type RhsRule rhs_rule;
type RhsRulePartList rhs_rule_part_list;
type RhsRulePart rhs_rule_part;
type RhsRulePart rhs_entry_complete;
type RhsRulePart rhs_entry;
type String opt_label;
type RhsSubList rhs_sub_list;
type RhsSub rhs_sub;
type Imports imports_code;
type TypeDefinitionList type_definition_list;
type TypeDefinition type_definition;
type CodeDefinitionList code_definition_list;
type CodeDefinition code_definition;
type ProductionRuleReference prod_rule_ref;
type AstDescription ast_description;
type AstDescriptionList ast_descriptions;

type String IDENTIFIER, CODE_TEXT;
type Long NUMBER;



code spec ≣ f                    ｟				result = new Specification(td, pl, im, tl, cl); ｠
code spec ≣ b                    ｟				result = new Specification(td, pl, null, null, null); ｠
code spec ≣ r                    ｟				result = new Specification(td, pl, ast_descriptions); ｠



code term_decl_list ≣ l          ｟				if (td==null) { result = tdlist; } else { result = new TerminalDeclarationList(tdlist, td); } ｠

code term_decl ≣ b               ｟				result = new TerminalDeclaration(ids); ｠

code ids ≣ l                     ｟				result = new IdList(ids, id); ｠
code ids ≣ s                     ｟				result = new IdList(null, id); ｠

code production_list ≣ l         ｟				result = new ProductionDefinitionList(plist, prod); ｠
code production_list ≣ s         ｟				result = new ProductionDefinitionList(null, prod); ｠

code production                  ｟				result = new ProductionDefinition(lhsName, ruleList); ｠

code rhs_rule_list ≣ l           ｟				result = new RhsRuleList(ruleList, rule); ｠
code rhs_rule_list ≣ s           ｟				result = new RhsRuleList(null, rule); ｠

code rhs_rule ≣ b                ｟				result = new RhsRule(null, rulePartList); ｠
code rhs_rule ≣ m                ｟				result = new RhsRule(imark, rulePartList); ｠

code rhs_rule_part_list ≣ l      ｟				result = new RhsRulePartList(rulePartList, rulePart); ｠

code rhs_rule_part               ｟				result = entry; ｠

code rhs_entry_complete ≣ b      ｟				result = entry; ｠
code rhs_entry_complete ≣ s      ｟				result = new RhsUnaryPart(entry, UnaryOpp.ZERO_OR_MORE); ｠
code rhs_entry_complete ≣ p      ｟				result = new RhsUnaryPart(entry, UnaryOpp.ONE_OR_MORE); ｠
code rhs_entry_complete ≣ e      ｟				result = new RhsUnaryPart(entry, UnaryOpp.OPTIONAL); ｠

code rhs_entry ≣ s               ｟				result = sub; ｠
code rhs_entry ≣ o               ｟				result = new RhsUnaryPart(sub, UnaryOpp.OPTIONAL); ｠
code rhs_entry ≣ b               ｟				result = new RhsSymbolPart(symName, label); ｠

code opt_label ≣ b               ｟				result = label; ｠

code rhs_sub_list ≣ l            ｟				result = new RhsSubList(subList, sub); ｠
code rhs_sub_list ≣ s            ｟				result = new RhsSubList(null, sub); ｠

code rhs_sub ≣ l                 ｟				result = new RhsSub(sub, entry); ｠
code rhs_sub ≣ s                 ｟				result = new RhsSub(null, entry); ｠


code imports_code                ｟				result = new Imports(ct); ｠

code type_definition_list ≣ l    ｟				result = new TypeDefinitionList(tdList, typeDef); ｠

code type_definition             ｟				result = new TypeDefinition(symtype, symids); ｠

code code_definition_list ≣ l    ｟				result = new CodeDefinitionList(cdList, codeDef); ｠


code code_definition             ｟				result = new CodeDefinition(0, ruleRef, codeText); ｠


code prod_rule_ref ≣ b           ｟				result = new ProductionRuleReference(lhsName); ｠
code prod_rule_ref ≣ m           ｟				result = new ProductionRuleReference(lhsName, label); ｠
code prod_rule_ref ≣ n           ｟				result = new ProductionRuleReference(lhsName, offset.intValue()); ｠


code ast_descriptions            ｟				result = new AstDescriptionList(link, rule); ｠


code ast_description             ｟				result = new AstDescription(ruleRef, codeText); ｠
