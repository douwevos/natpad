BUILDING NATPAD (LINUX)
=======================

To build Natpad for Linux you can enter the next command in a shell from within
the natpad directory

  ./build.sh linux build

This will build natpad and on success the build binary can be found at 
./natpad/build/natpad . In order to successfully build Natpad the next
prerequisites must be met:

 1. A JDK (Java Compiler) must be installed and the environment variable 
    JAVA_HOME must refer to it.

 2. The library and development files for the module gtk+-3.0 must be installed.
    On Ubuntu/Debian/Mint this module can be installed by calling
      sudo apt-get install libgtk-3-dev

 3. The compiler gcc must be installed.

To clean the build files enter the command

  ./build.sh clean

Please note that clean does only clear object files and the libxxx.a files. To
delete all build files you might want to call 'rm -Rf build'. This will delete
the whole build directory.

To run a full-build (clean and then build) enter:

  ./build.sh linux fullbuild


BUILDING NATPAD (WINDOWS)
=========================

Building Natpad for Windows is experimental and can only be run from a Linux
shell (might work under CygWin). The Windows build script uses the MinGw
C compiler, NSIS setup create and extracts the Windows build for GTK 3 from the
SuSe repository:

  http://download.opensuse.org/repositories/windows:/mingw:/win32/openSUSE_Factory/noarch

Since this repository is updated frequently, it can not be guaranteed that your
build is going to be stable. To build Natpad for Windows you can enter the next
commands in a shell from within the natpad directory

  ./build.sh windows configure
  ./build.sh windows build

The configure will install MinGw and some development library files from the
SuSE repository and must only run once (unless you remove the build folder).
The last command will create a setup file with the path:

  ./build/windows/natpad-setup.exe

Or one can execute the file natpad.exe using wine

  wine ./build/windows/natpad.exe


PACKAGING
=========

The build script allows 4 types of packages: 

 * debian
 * rpm
 * .tar.gz (source)
 * .exe (setup)

The first 3 are only available for Linux builds whereas the last is only
available for Windows builds.

To be able to build the debian and rpm packages you must have run a build
first. The following commands will in order: run a full build, build a debian
package and finally build a rpm package:

  ./build.sh linux fullbuild
  ./build.sh package debian
  ./build.sh package rpm

The rpm and debian packages can be found in the directory ./build/

To create a source tar.gz package you can enter

  ./build.sh package targz

To build an .exe windows setup package please read 'building natpad (windows)'
