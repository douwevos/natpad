package net.natpad.gross.export;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import net.natpad.gross.ast.bnf.AstFile;
import net.natpad.gross.build.CCModel;
import net.natpad.gross.build.CCStateMachine;
import net.natpad.gross.build.Production;
import net.natpad.gross.build.ProductionPart;
import net.natpad.gross.build.SymbolWithType;
import net.natpad.gross.export.glibc.ClassName;
import net.natpad.gross.runtime.NonTerminal;
import net.natpad.gross.runtime.Symbol;
import net.natpad.gross.runtime.Terminal;

public class CaterpillarExporter {

	public final CCStateMachine stateMachine;
	public final AstFile astFile;
	
	StateMachineEncoder stateMachineEncoder;

	ClassName actionClassName;
	ClassName configClassName;
	
	public CaterpillarExporter(CCStateMachine stateMachine, AstFile astFile, ClassName configClassName2, ClassName actionClassName2) {
		this.stateMachine = stateMachine;
		this.astFile = astFile;
		stateMachineEncoder = new StateMachineEncoder(stateMachine);
		this.actionClassName = actionClassName2;
		this.configClassName = configClassName2;
	}
	
	
	public void runExport(File base) throws IOException {
		base.mkdirs();
		exportStateMachineConfiguration(base);
		exportActions(base);

		if (astFile!=null) {
			AstCreator astCreator = new AstCreator(base, astFile, stateMachine, actionClassName.camelPrefix);
			astCreator.createAll();
		}

	}


	
	private void exportActions(File base) throws FileNotFoundException {
		if (stateMachineEncoder.actionIndexList.isEmpty()) {
			return;
		}
		ClassName cn = actionClassName;
		File symbolsFile = new File(base, cn.createFilename()+".c");
		PrintWriter outC = new PrintWriter(new FileOutputStream(symbolsFile, false));
		File symbolsHFile = new File(base, cn.createFilename()+".h");
		PrintWriter outH = new PrintWriter(new FileOutputStream(symbolsHFile, false));

		String cmlName = cn.camelPrefix+cn.camelPostfix;
		

		String dateAsStr = new SimpleDateFormat("yyyy.MM.dd G 'at' HH:mm:ss z").format(new Date());
		outH.println("/* This file was generated by Gross-CC on "+dateAsStr+" */");
		outH.println("#ifndef "+cn.upPrefix+""+cn.upPostfix+"_H_");
		outH.println("#define "+cn.upPrefix+""+cn.upPostfix+"_H_");
		outH.println();
		outH.println("#include <caterpillar.h>");
		outH.println();
		outH.println("G_BEGIN_DECLS");
		outH.println();
		outH.println("#define "+cn.upPrefix+"_TYPE_"+cn.upPostfix+"              ("+cn.lowPrefix+"_"+cn.lowPostfix+"_get_type())");
		outH.println("#define "+cn.upPrefix+"_"+cn.upPostfix+"(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), "+cn.lowPrefix+"_"+cn.lowPostfix+"_get_type(), "+cmlName+"))");
		outH.println("#define "+cn.upPrefix+"_"+cn.upPostfix+"_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), "+cn.upPrefix+"_TYPE_"+cn.upPostfix+", "+cmlName+"Class))");
		outH.println("#define "+cn.upPrefix+"_IS_"+cn.upPostfix+"(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), "+cn.upPrefix+"_TYPE_"+cn.upPostfix+"))");
		outH.println("#define "+cn.upPrefix+"_IS_"+cn.upPostfix+"_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), "+cn.upPrefix+"_TYPE_"+cn.upPostfix+"))");
		outH.println("#define "+cn.upPrefix+"_"+cn.upPostfix+"_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), "+cn.upPrefix+"_TYPE_"+cn.upPostfix+", "+cmlName+"Class))");
		outH.println();
		outH.println();
		outH.println("typedef struct _"+cmlName+"               "+cmlName+";");
		outH.println("typedef struct _"+cmlName+"Private        "+cmlName+"Private;");
		outH.println("typedef struct _"+cmlName+"Class          "+cmlName+"Class;");
		outH.println();
		outH.println();
		outH.println("struct _"+cmlName+" {");
		outH.println("	GObject parent;");
		outH.println("};");
		outH.println();
		outH.println("struct _"+cmlName+"Class {");
		outH.println("	GObjectClass parent_class;");
		outH.println("};");
		outH.println();
		outH.println();
		outH.println("GType "+cn.lowPrefix+"_"+cn.lowPostfix+"_get_type();");
		outH.println();
		outH.println(""+cmlName+" *"+cn.lowPrefix+"_"+cn.lowPostfix+"_new();");
		outH.println();
		outH.println("G_END_DECLS");
		outH.println();
		outH.println("#endif /* "+cn.upPrefix+""+cn.upPostfix+"_H_ */");
		
		
		
		
		outC.println("/* This file was generated by Gross-CC on "+dateAsStr+" */");
		outC.println("#include \""+cn.createFilename()+".h\"");
		outC.println("#include <grossruntime.h>");
		
		final CCModel model = stateMachine.model;
		String headerCodeText = model.getHeaderCodeText();
		if (headerCodeText!=null) {
			outC.println(headerCodeText);
		}
		outC.println();
		outC.println("#include <logging/catlogdefs.h>");
		outC.println("#define CAT_LOG_LEVEL CAT_LOG_WARN");
		outC.println("#define CAT_LOG_CLAZZ \""+cn.camelPrefix+cn.camelPostfix+"\"");
		outC.println("#include <logging/catlog.h>");
		outC.println();
		outC.println("static void l_action_handler_iface_init(GroRunIActionHandlerInterface *iface);");
		outC.println();
		outC.println("G_DEFINE_TYPE_WITH_CODE("+cmlName+", "+cn.lowPrefix+"_"+cn.lowPostfix+", G_TYPE_OBJECT,");
		outC.println("		G_IMPLEMENT_INTERFACE(GRORUN_TYPE_IACTION_HANDLER, l_action_handler_iface_init)");
		outC.println(");");
		outC.println();
		outC.println("static void l_finalize(GObject *object);");

		outC.println("static void "+cn.lowPrefix+"_"+cn.lowPostfix+"_class_init("+cmlName+"Class *clazz) {");
		outC.println("	GObjectClass *object_class = G_OBJECT_CLASS(clazz);");
		outC.println("	object_class->finalize = l_finalize;");
		outC.println("}");

		outC.println("static void "+cn.lowPrefix+"_"+cn.lowPostfix+"_init("+cmlName+" *instance) {");
		outC.println("}");

		outC.println("static void l_finalize(GObject *object) {");
		outC.println("	cat_log_detail(\"finalize:%p\", object);");
		outC.println("	cat_ref_denounce(object);");
		outC.println("	G_OBJECT_CLASS("+cn.lowPrefix+"_"+cn.lowPostfix+"_parent_class)->finalize(object);");
		outC.println("	cat_log_detail(\"finalized:%p\", object);");
		outC.println("}");

		outC.println(""+cmlName+" *"+cn.lowPrefix+"_"+cn.lowPostfix+"_new() {");
		outC.println("	"+cmlName+" *result = g_object_new("+cn.upPrefix+"_TYPE_"+cn.upPostfix+", NULL);");
		outC.println("	cat_ref_anounce(result);");
		outC.println("	return result;");
		outC.println("}");
		
		
		
		outC.println();
		outC.println("static GroRunStackEntry *l_extract(GroRunFork *fork, GroRunReduceLayout *reduce_layout, int offset) {");
		outC.println("	int rloff = grorun_reduce_layout_calculate_stack_offset(reduce_layout, offset);");
		outC.println("	return  grorun_fork_get_entry(fork, rloff);");
		outC.println("}");
		outC.println();
		outC.println();
		outC.println("static GObject *l_run_action(GroRunIActionHandler *self, GroRunFork *fork, GroRunReduceLayout *reduce_layout, int action_id) {");
		outC.println("	void *result = NULL;");
		outC.println("	switch(action_id) {");
		
		

		int aidx=0;
		for(Production prod : stateMachineEncoder.actionIndexList) {
			
			
			StringBuilder buf = new StringBuilder();
			buf.append(prod.lhs.name);
			buf.append(" ‚ü∂");
			for(ProductionPart p : prod) {
				buf.append(' ').append(p.symbol.name);
				if (p.label!=null) {
					buf.append(':').append(p.label);
				}
			}
			
			
			outC.println("		case "+aidx+" : { /* "+buf+" */");

			
			List<ProductionPart> excluded = prod.getExcluded();
			if (excluded!=null) {
				for(ProductionPart p : excluded) {
					if (p.label!=null) {
						String type = ((SymbolWithType) p.symbol).getType();
						if (type==null) {
							type = "GObject";
						}
						outC.println("			GroRunStackEntry *gse_"+p.label+" = NULL;  /* was optional */");
						outC.println("			"+type+" *"+p.label+" = NULL;  /* was optional */");
					}
				}
			}

			
			int idx = 0;
			for(ProductionPart p : prod) {
				if (p.label!=null) {
					String type = ((SymbolWithType) p.symbol).getType();
					if (type==null) {
						type = "GObject";
					}
					outC.println("				GroRunStackEntry *gse_"+p.label+" = l_extract(fork, reduce_layout, "+idx+");");
					outC.println("				"+type+" *"+p.label+" = grorun_stack_entry_get_value(gse_"+p.label+");");
				}
				idx++;
			}
			

			String actionCode = prod.getActionCode();
			if (actionCode!=null) {
				outC.println(""+actionCode);
			}
			aidx++;
			outC.println("		} break;");
		}

		
		outC.println("	}");
		outC.println("	return (GObject *) result;");
		outC.println("}");

		outC.println();
		outC.println("static void l_action_handler_iface_init(GroRunIActionHandlerInterface *iface) {");
		outC.println("	iface->runAction = l_run_action;");
		outC.println("}");

		outC.flush();
		outC.close();
		outH.flush();
		outH.close();
	}

	
	
	private void exportStateMachineConfiguration(File base) throws FileNotFoundException {
		File symbolsFile = new File(base, configClassName.createFilename()+".c");
		PrintWriter outC = new PrintWriter(new FileOutputStream(symbolsFile, false));
		File symbolshFile = new File(base, configClassName.createFilename()+".h");
		PrintWriter outH = new PrintWriter(new FileOutputStream(symbolshFile, false));

		final CCModel model = stateMachine.model;

		outH.println("#ifndef "+configClassName.upPrefix+configClassName.upPostfix+"_H_");
		outH.println("#define "+configClassName.upPrefix+configClassName.upPostfix+"_H_");
		outH.println();
		outH.println("#include <grossruntime.h>");
		outH.println();
		outH.println("const int "+configClassName.fullLow()+"_nr_of_symbols;");
		outH.println("const GroRunSymbolDescription *"+configClassName.fullLow()+"_symbols;");
		outH.println("const int "+configClassName.fullLow()+"_nr_of_states;");
		outH.println("const char *"+configClassName.fullLow()+"_states_text;");
		outH.println();
		outH.println("#endif /* "+configClassName.upPrefix+configClassName.upPostfix+"_H_ */");

		
		
		
		outC.println("#include \""+configClassName.createFilename()+".h\"");
		outC.println();
		
		Collection<Symbol> allSymbols = model.allSymbols();
		int max= 0;
		for (Symbol symbol : allSymbols) {
			if (symbol.id>max) {
				max = symbol.id;
			}
		}
		Symbol listed[] = new Symbol[max+1];
		for (Symbol symbol : allSymbols) {
			listed[symbol.id] = symbol;
		}
		
		
		outC.println("const int "+configClassName.fullLow()+"_nr_of_symbols = "+listed.length+";");
		outC.println("static const GroRunSymbolDescription symbols[] = {");
		
		boolean isFirst = true;
		for (Symbol symbol : listed) {
			if (symbol instanceof NonTerminal) {
				outC.println("		"+(isFirst ? "  " : ", ")+"{ TRUE, \""+symbol.name+"\", "+symbol.id.intValue()+"} ");
			} else if (symbol instanceof Terminal) {
				outC.println("		"+(isFirst ? "  " : ", ")+"{ FALSE, \""+symbol.name+"\", "+symbol.id.intValue()+"} ");
			} else {
				outC.println("		"+(isFirst ? "  " : ", ")+"NULL");
			}
			isFirst = false;
		}
		outC.println("};");
		
		outC.println("const GroRunSymbolDescription *"+configClassName.fullLow()+"_symbols = symbols;");

		
		outC.println();
		outC.println("const int "+configClassName.fullLow()+"_nr_of_states = "+stateMachine.stateCount()+";");
		outC.println("const char *"+configClassName.fullLow()+"_states_text =");
		String cfgText = stateMachineEncoder.createStateConfigurationText();
		for(int idx=0; idx<cfgText.length(); idx += 100) {
			int e = idx+100;
			if (e>cfgText.length()) {
				e=cfgText.length();
			}
			outC.println("				"+(idx==0 ? "  " : "  ")+"\""+cfgText.substring(idx, e)+"\"");
		}
		outC.println("			;");
		outC.println();
		
		
		outC.println("/*");
		
		
		String SYM_PREFIX = configClassName.upPrefix+"_SYM_";
		int idx = 0;
		for(Symbol symbol : allSymbols) {
			if (symbol instanceof Terminal) {
				Terminal t = (Terminal) symbol;
				outC.println("	l_connect_symbol(connected_syms, "+SYM_PREFIX+t.name.toUpperCase()+", symbol_provider, \""+t.name+"\");");
				idx++;
			}
		}
		for(Symbol symbol : allSymbols) {
			if (symbol instanceof Terminal) {
				Terminal t = (Terminal) symbol;
				outC.println("	l_add_kw_mapping(priv->keyword_mapping, \""+t.name.toLowerCase()+"\", "+SYM_PREFIX+t.name.toUpperCase()+");");
			}
		}
		idx = 0;
		for(Symbol symbol : allSymbols) {
			if (symbol instanceof Terminal) {
				Terminal t = (Terminal) symbol;
				String p = "#define "+SYM_PREFIX+t.name.toUpperCase();
				while(p.length()<100) {
					p+=" ";
				}
				outC.println(p+idx);
				idx++;
			}
		}

		outC.println("*/");
		
		
		outC.flush();
		outC.close();
		outH.flush();
		outH.close();
	}



//	
//	private int getOrAddActionForRule(Production production) {
//		String actionCode = production.getActionCode();
//		if (actionCode==null) {
//			return -1;
//		}
//		for(int idx=0; idx<actionIndexList.size(); idx++) {
//			Production pp = actionIndexList.get(idx);
//			if (pp==production) {
//				return idx;
//			}
//		}
//		actionIndexList.add(production);
//		
//		return actionIndexList.size()-1;
//	}

}
