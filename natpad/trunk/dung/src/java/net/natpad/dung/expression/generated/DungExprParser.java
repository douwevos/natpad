/* generated by natpad.cup Wed Jan 18 21:46:51 CET 2017 */
package net.natpad.dung.expression.generated;

import net.natpad.dung.expression.ExpressionHelper;
import net.natpad.dung.expression.IExpressionValue;
import net.natpad.dung.expression.StringLiteral;
import net.natpad.dung.expression.generated.runtime.LrParser;
import net.natpad.dung.expression.generated.runtime.LrParserContext;
import net.natpad.dung.expression.generated.runtime.LrSymbol;

public class DungExprParser extends LrParser {

	public DungExprParser() {}

	/** Production table. */
	protected static final short productionTable[][] = 
	new short[][] {
		new short[] { 0, 2 },
		new short[] { 1, 1 },
		new short[] { 1, 3 },
		new short[] { 2, 1 },
		new short[] { 2, 1 },
		new short[] { 3, 1 },
		new short[] { 3, 4 },
		new short[] { 4, 1 },
		new short[] { 4, 1 },
		new short[] { 4, 1 }
 };
	/** Access to production table. */
	public short[][] getProductionTable() {
		return productionTable;
	}

	/** Parse-action table. */
	protected static final short[][] actionTable = 
	new short[][] {
		new short[] { 4, 6, 5, 7, 7, 8, 8, 9, -1, 0 },
		new short[] { 0, 15, 6, 13, -1, 0 },
		new short[] { 0, -2, 3, -2, 6, -2, -1, 0 },
		new short[] { 0, -4, 3, -4, 6, -4, -1, 0 },
		new short[] { 0, -5, 3, -5, 6, -5, -1, 0 },
		new short[] { 0, -10, 3, -10, 6, -10, -1, 0 },
		new short[] { 0, -6, 2, 10, 3, -6, 6, -6, -1, 0 },
		new short[] { 0, -9, 3, -9, 6, -9, -1, 0 },
		new short[] { 0, -8, 3, -8, 6, -8, -1, 0 },
		new short[] { 4, 6, 5, 7, 7, 8, 8, 9, -1, 0 },
		new short[] { 3, 12, 6, 13, -1, 0 },
		new short[] { 0, -7, 3, -7, 6, -7, -1, 0 },
		new short[] { 5, 14, -1, 0 },
		new short[] { 0, -3, 3, -3, 6, -3, -1, 0 },
		new short[] { 0, -1, -1, 0 }
 };
  /** Access to parse-action table. */
	public short[][] getActionTable() {
		return actionTable;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] reduceTable = 
	new short[][] {
		new short[] { 1, 1, 2, 2, 3, 3, 4, 4, -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { 1, 10, 2, 2, 3, 3, 4, 4, -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 },
		new short[] { -1, -1 }
 };
	/** Access to <code>reduce_goto</code> table. */
	public short[][] getReduceTable() {
		return reduceTable;
	}

	/** Instance of action encapsulation class. */
	protected Actions actionObject;

	/** Action encapsulation object initializer. */
	protected void initActions() {
		actionObject = new Actions();
	}

	/** Invoke a user supplied parse action. */
	public LrSymbol runAction(LrParserContext parserContext, int actionId) throws Exception {
		/* call code in generated class */
		return actionObject.runAction(parserContext, actionId);
	}

	/** Indicates start state. */
	public int startState() {
		return 0;
	}
	/** Indicates start production. */
	public int startProduction() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int eofSymbol() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int errorSymbol() {
		return 1;
	}

}
