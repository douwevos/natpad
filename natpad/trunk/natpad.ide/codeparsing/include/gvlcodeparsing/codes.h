/*
   Author      : Gerard Visser
   e-mail      : visser.gerard(at)gmail.com

   Copyright (C) 2009, 2010, 2011 Gerard Visser.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#ifndef ___CODES_INCLUDED
#define ___CODES_INCLUDED

/* Tells whether the token is part of a preprocessor
   line or not: 1 bit. */
#define GVLCP_AREA_1_WIDTH              (1)
#define GVLCP_MASK_1                    (0x1)
#define GVLCP_MASK_PREPROCESSOR         (GVLCP_MASK_1)
#define GVLCP_CODE_PREPROCESSOR         (0x1)

/* General classification: 5 bits. */
#define GVLCP_AREA_2_SHIFT              (GVLCP_AREA_1_WIDTH)
#define GVLCP_AREA_2_WIDTH              (5)
#define GVLCP_MASK_2                    (0x0000001F << GVLCP_AREA_2_SHIFT)
#define GVLCP_MASK_GEN_CLASSIFICATION   (GVLCP_MASK_2)
#define GVLCP_CODE_ADJECTIVE            (1 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_BUILT_IN_MACRO       (2 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_COMMENT              (3 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_DIRECTIVE            (4 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_FILE_NAME            (5 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_HALF_TYPE            (6 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_IDENTIFIER           (7 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_KEY_WORD             (8 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_MISCELLANEOUS        (9 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_NUMBER               (10 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_OPERATOR             (11 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_PREPROCESSOR_START   (12 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_STATEMENT            (13 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_STRING               (14 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_SYNTHETIC            (15 << GVLCP_AREA_2_SHIFT)
#define GVLCP_CODE_TYPE                 (16 << GVLCP_AREA_2_SHIFT)

/* For NUMBER and TYPE (2 bits).
   'void' is neither INTEGER nor FLOATING_POINT. */
#define GVLCP_AREA_3_SHIFT              (GVLCP_AREA_2_SHIFT + GVLCP_AREA_2_WIDTH)
#define GVLCP_AREA_3_WIDTH              (2)
#define GVLCP_MASK_3                    (0x00000003 << GVLCP_AREA_3_SHIFT)
#define GVLCP_CODE_FLOATING_POINT       (1 << GVLCP_AREA_3_SHIFT)
#define GVLCP_CODE_INTEGER              (2 << GVLCP_AREA_3_SHIFT)
/* For FILE_NAME. */
#define GVLCP_CODE_RELATIVE             (1 << GVLCP_AREA_3_SHIFT)

/* For TYPE and ADJECTIVE (3 bits).
   Default size, no code (0), is 32 for 'int' and 64 for 'double'. */
#define GVLCP_AREA_4_SHIFT              (GVLCP_AREA_3_SHIFT + GVLCP_AREA_3_WIDTH)
#define GVLCP_AREA_4_WIDTH              (3)
#define GVLCP_MASK_4                    (0x00000007 << GVLCP_AREA_4_SHIFT)
#define GVLCP_CODE_SIZE_8               (1 << GVLCP_AREA_4_SHIFT)
#define GVLCP_CODE_SIZE_16              (2 << GVLCP_AREA_4_SHIFT)
#define GVLCP_CODE_SIZE_32              (3 << GVLCP_AREA_4_SHIFT)
#define GVLCP_CODE_SIZE_64              (4 << GVLCP_AREA_4_SHIFT)
#define GVLCP_CODE_SIZE_80              (5 << GVLCP_AREA_4_SHIFT)

#define GVLCP_AREA_5_SHIFT              (GVLCP_AREA_4_SHIFT + GVLCP_AREA_4_WIDTH)
#define GVLCP_AREA_5_WIDTH              (4)
#define GVLCP_MASK_5                    (0x0000000F << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_1                  (1 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_2                  (2 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_3                  (3 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_4                  (4 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_5                  (5 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_6                  (6 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_7                  (7 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_8                  (8 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_9                  (9 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_10                 (10 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_11                 (11 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_12                 (12 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_13                 (13 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_14                 (14 << GVLCP_AREA_5_SHIFT)
#define GVLCP_AREA_5_15                 (15 << GVLCP_AREA_5_SHIFT)

#define GVLCP_AREA_6_SHIFT              (GVLCP_AREA_5_SHIFT + GVLCP_AREA_5_WIDTH)
#define GVLCP_AREA_6_WIDTH              (2)
#define GVLCP_MASK_6                    (0x00000003 << GVLCP_AREA_6_SHIFT)
#define GVLCP_AREA_6_1                  (1 << GVLCP_AREA_6_SHIFT)
#define GVLCP_AREA_6_2                  (2 << GVLCP_AREA_6_SHIFT)

#define GVLCP_AREA_7_SHIFT              (GVLCP_AREA_6_SHIFT + GVLCP_AREA_6_WIDTH)
#define GVLCP_AREA_7_WIDTH              (1)
#define GVLCP_MASK_7                    (0x00000001 << GVLCP_AREA_7_SHIFT)
#define GVLCP_AREA_7_1                  (1 << GVLCP_AREA_7_SHIFT)

/* OPERATORs:
   'are arithmic' or 'have two operands' or 'are pointer related'. */
#define GVLCP_MASK_OPERATORS            (GVLCP_MASK_5 | GVLCP_MASK_4 | GVLCP_MASK_2)
#define GVLCP_CODE_ARITHMIC             (GVLCP_CODE_OPERATOR | (0x1 << GVLCP_AREA_4_SHIFT))
#define GVLCP_CODE_POINTER_RELATED      (GVLCP_CODE_OPERATOR | (0x2 << GVLCP_AREA_4_SHIFT))
#define GVLCP_CODE_TWO_OPERANDS         (GVLCP_CODE_OPERATOR | (0x4 << GVLCP_AREA_4_SHIFT))

#define GVLCP_CODE_ARITHMIC_IN          (GVLCP_CODE_ARITHMIC | GVLCP_CODE_TWO_OPERANDS)

#define GVLCP_CODE_ARITHMIC_PRE         (GVLCP_CODE_ARITHMIC | GVLCP_AREA_5_1)
#define GVLCP_CODE_ARITHMIC_PRE_OR_POST (GVLCP_CODE_ARITHMIC | GVLCP_AREA_5_2)
#define GVLCP_CODE_ASSIGNMENT           (GVLCP_CODE_TWO_OPERANDS | GVLCP_AREA_5_3)
#define GVLCP_CODE_COMPARISON           (GVLCP_CODE_TWO_OPERANDS | GVLCP_AREA_5_4)
#define GVLCP_CODE_DEFINED              (GVLCP_CODE_ARITHMIC | GVLCP_AREA_5_5)
#define GVLCP_CODE_POINTER_DEREF        (GVLCP_CODE_POINTER_RELATED | GVLCP_AREA_5_6)
#define GVLCP_CODE_POINTER_REF          (GVLCP_CODE_POINTER_RELATED | GVLCP_AREA_5_7)
#define GVLCP_CODE_STRUCT_RELATED       (GVLCP_CODE_TWO_OPERANDS | GVLCP_AREA_5_8)

#define GVLCP_CODE_ASTERISK             (GVLCP_CODE_ARITHMIC_IN | GVLCP_CODE_POINTER_DEREF)

/* DIRECTIVEs.
   Some directives can be ignored in later steps.
   The directives are also grouped to help the tokenising phase. */
#define GVLCP_MASK_DIRECTIVE_GROUPS     (GVLCP_MASK_4 | GVLCP_MASK_1)
#define GVLCP_CODE_GROUP_DEFINE         ((1 << GVLCP_AREA_4_SHIFT) | GVLCP_CODE_PREPROCESSOR)
#define GVLCP_CODE_GROUP_ELIF           ((2 << GVLCP_AREA_4_SHIFT) | GVLCP_CODE_PREPROCESSOR)
#define GVLCP_CODE_GROUP_ENDIF          ((3 << GVLCP_AREA_4_SHIFT) | GVLCP_CODE_PREPROCESSOR)
#define GVLCP_CODE_GROUP_IFDEF          ((4 << GVLCP_AREA_4_SHIFT) | GVLCP_CODE_PREPROCESSOR)
#define GVLCP_CODE_GROUP_INCLUDE        ((5 << GVLCP_AREA_4_SHIFT) | GVLCP_CODE_PREPROCESSOR)
#define GVLCP_CODE_GROUP_LINE           ((6 << GVLCP_AREA_4_SHIFT) | GVLCP_CODE_PREPROCESSOR)
#define GVLCP_CODE_GROUP_PRAGMA         ((7 << GVLCP_AREA_4_SHIFT) | GVLCP_CODE_PREPROCESSOR)

#define GVLCP_CODE_DIRECTIVE_DEFINE     (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_1  | GVLCP_CODE_GROUP_DEFINE)
#define GVLCP_CODE_DIRECTIVE_ELIF       (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_2  | GVLCP_CODE_GROUP_ELIF)
#define GVLCP_CODE_DIRECTIVE_ELSE       (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_3  | GVLCP_CODE_GROUP_ENDIF)
#define GVLCP_CODE_DIRECTIVE_ENDIF      (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_4  | GVLCP_CODE_GROUP_ENDIF)
#define GVLCP_CODE_DIRECTIVE_ERROR      (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_5  | GVLCP_CODE_GROUP_PRAGMA | GVLCP_CODE_IGNORE)
#define GVLCP_CODE_DIRECTIVE_IF         (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_6  | GVLCP_CODE_GROUP_ELIF)
#define GVLCP_CODE_DIRECTIVE_IFDEF      (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_7  | GVLCP_CODE_GROUP_IFDEF)
#define GVLCP_CODE_DIRECTIVE_IFNDEF     (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_8  | GVLCP_CODE_GROUP_IFDEF)
#define GVLCP_CODE_DIRECTIVE_INCLUDE    (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_9  | GVLCP_CODE_GROUP_INCLUDE)
#define GVLCP_CODE_DIRECTIVE_LINE       (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_10 | GVLCP_CODE_GROUP_LINE | GVLCP_CODE_IGNORE)
#define GVLCP_CODE_DIRECTIVE_PRAGMA     (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_11 | GVLCP_CODE_GROUP_PRAGMA | GVLCP_CODE_IGNORE)
#define GVLCP_CODE_DIRECTIVE_UNDEF      (GVLCP_CODE_DIRECTIVE | GVLCP_AREA_5_12 | GVLCP_CODE_GROUP_IFDEF)

/* HALF_TYPEs. */
#define GVLCP_CODE_ENUM                 (GVLCP_CODE_HALF_TYPE | GVLCP_AREA_5_1)
#define GVLCP_CODE_STRUCT               (GVLCP_CODE_HALF_TYPE | GVLCP_AREA_5_2)
#define GVLCP_CODE_UNION                (GVLCP_CODE_HALF_TYPE | GVLCP_AREA_5_3)

/* TYPEs. */
#define GVLCP_CODE_CHAR                 (GVLCP_CODE_TYPE | GVLCP_CODE_INTEGER | GVLCP_CODE_SIZE_8)
#define GVLCP_CODE_DOUBLE               (GVLCP_CODE_TYPE | GVLCP_CODE_FLOATING_POINT)
#define GVLCP_CODE_FLOAT                (GVLCP_CODE_TYPE | GVLCP_CODE_FLOATING_POINT | GVLCP_CODE_SIZE_32)
#define GVLCP_CODE_INT                  (GVLCP_CODE_TYPE | GVLCP_CODE_INTEGER)
#define GVLCP_CODE_VOID                 (GVLCP_CODE_TYPE)

/* ADJECTIVEs. */
#define GVLCP_MASK_ADJECTIVES           (GVLCP_MASK_5 | GVLCP_MASK_4 | GVLCP_MASK_2)
#define GVLCP_CODE_CONST                (GVLCP_CODE_ADJECTIVE | GVLCP_AREA_5_1)
#define GVLCP_CODE_LONG                 (GVLCP_CODE_ADJECTIVE | GVLCP_AREA_5_2)
#define GVLCP_CODE_SHORT                (GVLCP_CODE_ADJECTIVE | GVLCP_AREA_5_3 | GVLCP_CODE_SIZE_16)
#define GVLCP_CODE_SIGNED               (GVLCP_CODE_ADJECTIVE | GVLCP_AREA_5_4)
#define GVLCP_CODE_STATIC               (GVLCP_CODE_ADJECTIVE | GVLCP_AREA_5_5)
#define GVLCP_CODE_UNSIGNED             (GVLCP_CODE_ADJECTIVE | GVLCP_AREA_5_6)
#define GVLCP_CODE_VOLATILE             (GVLCP_CODE_ADJECTIVE | GVLCP_AREA_5_7)

/* BUILT_IN_MACROs. */
#define GVLCP_CODE_FILE                 (GVLCP_CODE_BUILT_IN_MACRO | GVLCP_AREA_5_1)
#define GVLCP_CODE_LINE                 (GVLCP_CODE_BUILT_IN_MACRO | GVLCP_AREA_5_2)

/* STATEMENTs. */
#define GVLCP_CODE_BREAK                (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_1)
#define GVLCP_CODE_CONTINUE             (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_2)
#define GVLCP_CODE_DO                   (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_3)
#define GVLCP_CODE_ELSE                 (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_4)
#define GVLCP_CODE_FOR                  (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_5)
#define GVLCP_CODE_GOTO                 (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_6)
#define GVLCP_CODE_IF                   (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_7)
#define GVLCP_CODE_RETURN               (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_8)
#define GVLCP_CODE_SWITCH               (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_9)
#define GVLCP_CODE_WHILE                (GVLCP_CODE_STATEMENT | GVLCP_AREA_5_10)

/* Other KEY_WORDs. */
#define GVLCP_CODE_ASM                  (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_1)
#define GVLCP_CODE_ATTRIBUTE            (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_2)
#define GVLCP_CODE_AUTO                 (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_3)
#define GVLCP_CODE_CASE                 (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_4)
#define GVLCP_CODE_DEFAULT              (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_5)
#define GVLCP_CODE_EXTERN               (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_6)
#define GVLCP_CODE_FORTRAN              (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_7)
#define GVLCP_CODE_INLINE               (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_8)
#define GVLCP_CODE_REGISTER             (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_9)
#define GVLCP_CODE_SIZEOF               (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_10)
#define GVLCP_CODE_TYPEDEF              (GVLCP_CODE_KEY_WORD | GVLCP_AREA_5_11)

/* SYNTHETICs. */
#define GVLCP_CODE_LAST_TOKEN           (GVLCP_CODE_SYNTHETIC | GVLCP_AREA_5_1)

/* MISCELLANEOUS. */
#define GVLCP_CODE_BACKSLASH            (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_1)
#define GVLCP_CODE_BRACE_CLOSE          (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_2)
#define GVLCP_CODE_BRACE_OPEN           (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_3)
#define GVLCP_CODE_BRACKET_CLOSE        (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_4)
#define GVLCP_CODE_BRACKET_OPEN         (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_5)
#define GVLCP_CODE_COLON                (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_6)
#define GVLCP_CODE_COMMA                (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_7)
#define GVLCP_CODE_ELLIPSIS             (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_8)
#define GVLCP_CODE_PARENTHESIS_CLOSE    (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_9)
#define GVLCP_CODE_PARENTHESIS_OPEN     (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_10)
#define GVLCP_CODE_QUESTION_MARK        (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_11)
#define GVLCP_CODE_SEMICOLON            (GVLCP_CODE_MISCELLANEOUS | GVLCP_AREA_5_12)

/* Information about macro definitions. */
#define GVLCP_MASK_MACRO_IDS            (GVLCP_MASK_6 | GVLCP_MASK_1)
#define GVLCP_CODE_MACRO_ID             ((GVLCP_AREA_6_1) | GVLCP_CODE_PREPROCESSOR)
#define GVLCP_CODE_MACRO_ID_PARAMS      ((GVLCP_AREA_6_2) | GVLCP_CODE_PREPROCESSOR)

/* For tokens that can be ignored;
   maybe AREA_3 could be used to store this bit. */
#define GVLCP_MASK_IGNORE               (GVLCP_MASK_7)
#define GVLCP_CODE_IGNORE               (GVLCP_AREA_7_1)


/* Errors. */
#define GVLCP_ERROR_DEFINED_USED_AS_MACRO_NAME       0x010000
#define GVLCP_ERROR_EMPTY_CHARACTER_CONSTANT         0x020000
#define GVLCP_ERROR_ESCAPE_SEQUENCE_NO_HEX_DIGITS    0x030000
#define GVLCP_ERROR_EXPONENT_HAS_NO_DIGITS           0x040000
#define GVLCP_ERROR_INCLUDE                          0x050000
#define GVLCP_ERROR_INVALID_DIGIT_IN_OCTAL           0x060000
#define GVLCP_ERROR_INVALID_DIRECTIVE                0x070000
#define GVLCP_ERROR_INVALID_SUFFIX_ON_FLOAT          0x080000
#define GVLCP_ERROR_INVALID_SUFFIX_ON_INT            0x090000
#define GVLCP_ERROR_INVALID_TOKEN                    0x0A0000
#define GVLCP_ERROR_LINE_EXPECTS_NONNEGATIVE_INTEGER 0x0B0000
#define GVLCP_ERROR_MACRO_NAMES_MUST_BE_IDENTIFIERS  0x0C0000
#define GVLCP_ERROR_MISSING_TERMINATING_CHARACTER    0x0D0000
#define GVLCP_ERROR_NO_MACRO_NAME_GIVEN              0x0E0000
#define GVLCP_ERROR_NOT_NONNEGATIVE_INTEGER          0x0F0000
#define GVLCP_ERROR_STRAY_TOKEN                      0x100000
#define GVLCP_ERROR_STRING_EXPECTED                  0x110000

/* Warnings. */
#define GVLCP_WARN_ESCAPE_SEQUENCE_OUT_OF_RANGE      0x1
#define GVLCP_WARN_INTEGER_TOO_LARGE                 0x2
#define GVLCP_WARN_LINE_NUMBER_OUT_OF_RANGE          0x3
#define GVLCP_WARN_MULTICHARACTER_CHARACTER_CONSTANT 0x4
#define GVLCP_WARN_NOT_ANSI                          0x5
#define GVLCP_WARN_SUPERFLUOUS_TOKEN                 0x6
#define GVLCP_WARN_UNKNOWN_ESCAPE_SEQUENCE           0x7

#endif
