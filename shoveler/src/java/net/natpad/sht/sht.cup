import net.natpad.sht.model.BlockValue;
import net.natpad.sht.model.SimpleValue;
import net.natpad.sht.model.Value;
import net.natpad.sht.model.ListValue;
import net.natpad.sht.model.Reference;
import net.natpad.sht.model.Model;
import net.natpad.sht.model.Template;
import net.natpad.sht.model.TemplateArgument;
import net.natpad.sht.model.TemplateCall;

import java.util.Vector;

terminal	LBRACE, RBRACE, COMMA, NIL, SEMICOLON, LPARREN, RPARREN;


terminal String	ID, ASSIGN_VALUE_EOL, STRING, NUMBER;



non terminal Value				value;

non terminal ListValue			values, list_value;
non terminal BlockValue			block_value, reference_block, block_body;

non terminal Model				sht_block, sht_file;
non terminal Template			template_def;
non terminal TemplateArgument	template_arg;
non terminal Vector				template_arguments;
non terminal TemplateCall		template_call;


non terminal Reference			simple_reference, block_reference, property_reference, reference;

non terminal SimpleValue		simple_value;



start with sht_file;


sht_file ::=
				sht_block:b {: RESULT=b; :}
			;


sht_block ::=
				template_def:d {: RESULT = new Model(); RESULT.add(d); :}
			|	reference:r {: RESULT = new Model(); RESULT.add(r); :}
			|	sht_block:b template_def:d {: RESULT = b; RESULT.add(d); :}
			|	sht_block:b reference:r {: RESULT = b; RESULT.add(r); :}
			;

template_def ::=
			  ID:i LPARREN template_arguments:args RPARREN SEMICOLON 
			  {: 
			  RESULT = new Template(i);
			  for(int idx=0; idx<args.size(); idx++) { 
			  	TemplateArgument arg = (TemplateArgument) args.get(idx);
			  	RESULT.add(arg); 
			  } 
			  :}
			| ID:i LPARREN                         RPARREN SEMICOLON {: RESULT = new Template(i); :}
			;


template_arguments ::=
			  template_arg:arg {: RESULT = new Vector(); RESULT.add(arg); :}
			| template_arguments:args COMMA template_arg:arg {: RESULT = args; RESULT.add(arg); :}
			;

template_arg ::=
			  ID:i {: RESULT=new TemplateArgument(i); :}
			| ID:i value:e {: RESULT=new TemplateArgument(i); RESULT.setDefault(e); :}
			;


reference_block ::=
			  reference_block:rb reference:ref {: RESULT=rb; rb.add(ref); :}
			|                    reference:ref {: RESULT=new BlockValue(); RESULT.add(ref); :}
			;

reference ::=
				block_reference:r {: RESULT=r; :}
			|	property_reference:r {: RESULT=r; :}
			|	simple_reference:r {: RESULT=r; :}
			;


simple_reference ::=
				ID:i simple_value:v SEMICOLON {: RESULT = new Reference(i); RESULT.setValue(v); :}
			;

block_reference ::=
				ID:i block_value:s {: RESULT = new Reference(i); RESULT.setValue(s); :}
			|	ID:i list_value:s {: RESULT = new Reference(i); RESULT.setValue(s); :}
			;

property_reference ::=
  	  	  		ID:i ASSIGN_VALUE_EOL:v {: SimpleValue sv = new SimpleValue(v); RESULT=new Reference(i); RESULT.setValue(sv); :}
			;


block_value ::=
				template_call:tc block_body:b {: RESULT = b; b.setTemplateCall(tc); :}
			|	                 block_body:b {: RESULT = b; :}
			;


list_value ::=
				LBRACE values:el RBRACE {: RESULT=el; :}
			;


template_call ::=
				ID:i LPARREN           RPARREN {: RESULT = new TemplateCall(i); :}
			|	ID:i LPARREN values:el RPARREN {: RESULT = new TemplateCall(i); RESULT.setArgumentList(el); :}
			;
			
block_body ::=
				LBRACE                    RBRACE {: RESULT = new BlockValue(); :}
			|	LBRACE reference_block:nb RBRACE {: RESULT = nb; :}
			;





values ::=
				values:el COMMA value:e {: RESULT=el; el.add(e); :}
			|	value:e {: RESULT = new ListValue(); RESULT.add(e); :}
			;
			
			
value ::=
				block_value:s {: RESULT=s; :}
			|	list_value:s {: RESULT=s; :}
			|	simple_value:v {: RESULT=v; :}
			;
			

simple_value ::=
			  STRING:s {:
			  	RESULT = new SimpleValue(s);
			  :}
			| NUMBER:s {:
				RESULT = new SimpleValue(s);
			:}
			| NIL {:
				RESULT = new SimpleValue(null);
			:}
			;