
action code {:

#include "../../model/shomodel.h"
#include "../../model/shoreference.h"
#include "../../model/shoivalue.h"
#include "../../model/shoblockvalue.h"
#include "../../model/sholistvalue.h"
#include "../../model/shosimplevalue.h"
#include "../../model/shotemplate.h"
#include "../../model/shotemplateargument.h"
#include "../../model/shotemplatecall.h"

:}


terminal	LBRACE, RBRACE, COMMA, NIL, SEMICOLON, LPARREN, RPARREN;


terminal CatStringWo	ID, ASSIGN_VALUE_EOL, STRING, NUMBER;



non terminal ShoIValue				value;

non terminal ShoListValue			values, list_value;
non terminal ShoBlockValue			block_value, reference_block, block_body;

non terminal ShoModel				sht_block, sht_file;
non terminal ShoTemplate			template_def;
non terminal ShoTemplateArgument	template_arg;
non terminal CatArrayWo				template_arguments;
non terminal ShoTemplateCall		template_call;


non terminal ShoReference			simple_reference, block_reference, property_reference, reference;

non terminal ShoSimpleValue			simple_value;



start with sht_file;


sht_file ::=
				sht_block:b {: RESULT=b; :}
			;


sht_block ::=
				template_def:d {: RESULT = sho_model_new(); sho_model_add_template(RESULT, d);  $cup.create.token$ cat_unref(RESULT); :}
			|	reference:r {: RESULT = sho_model_new(); sho_reference_list_add_reference((ShoReferenceList *) RESULT, r);  $cup.create.token$ cat_unref(RESULT); :}
			|	sht_block:b template_def:d {: RESULT = b; sho_model_add_template(RESULT, d); :}
			|	sht_block:b reference:r {: RESULT = b; sho_reference_list_add_reference((ShoReferenceList *) RESULT, r); :}
			;

template_def ::=
			  ID:i LPARREN template_arguments:args RPARREN SEMICOLON 
			  {: 
			  RESULT = sho_template_new(i);
			  int idx;
			  for(idx=0; idx<cat_array_wo_size(args); idx++) { 
			  	ShoTemplateArgument *arg = (ShoTemplateArgument *) cat_array_wo_get(args, idx);
			  	sho_template_add_argument(RESULT, arg);
			  }
			  $cup.create.token$ cat_unref(RESULT); 
			  :}
			| ID:i LPARREN                         RPARREN SEMICOLON {: RESULT = sho_template_new(i);  $cup.create.token$ cat_unref(RESULT); :}
			;


template_arguments ::=
			  template_arg:arg {: RESULT = cat_array_wo_new(); cat_array_wo_append(RESULT, (GObject *) arg);  $cup.create.token$ cat_unref(RESULT); :}
			| template_arguments:args COMMA template_arg:arg {: RESULT = args; cat_array_wo_append(RESULT, (GObject *) arg); :}
			;

template_arg ::=
			  ID:i {: RESULT = sho_template_argument_new(i); :}
			| ID:i value:e {: RESULT=sho_template_argument_new(i); sho_template_argument_set_default(RESULT, e);  $cup.create.token$ cat_unref(RESULT); :}
			;


reference_block ::=
			  reference_block:rb reference:ref {: RESULT=rb; sho_reference_list_add_reference((ShoReferenceList *) RESULT, ref); :}
			|                    reference:ref {: RESULT = sho_block_value_new(); sho_reference_list_add_reference((ShoReferenceList *) RESULT, ref);  $cup.create.token$ cat_unref(RESULT); :}
			;

reference ::=
				block_reference:r {: RESULT=r; :}
			|	property_reference:r {: RESULT=r; :}
			|	simple_reference:r {: RESULT=r; :}
			;


simple_reference ::=
				ID:i simple_value:v SEMICOLON {: RESULT = sho_reference_new(i); sho_reference_set_value(RESULT, (ShoIValue *) v); $cup.create.token$ cat_unref(RESULT); :}
			;

block_reference ::=
				ID:i block_value:s {: RESULT = sho_reference_new(i); sho_reference_set_value(RESULT, (ShoIValue *) s); $cup.create.token$ cat_unref(RESULT); :}
			|	ID:i list_value:s {: RESULT = sho_reference_new(i); sho_reference_set_value(RESULT, (ShoIValue *) s); $cup.create.token$ cat_unref(RESULT); :}
			;

property_reference ::=
  	  	  		ID:i ASSIGN_VALUE_EOL:v {: ShoSimpleValue *sv = sho_simple_value_new_string(v); RESULT=sho_reference_new(i); sho_reference_set_value(RESULT, (ShoIValue *) sv);  $cup.create.token$ cat_unref(RESULT); cat_unref(sv); :}
			;


block_value ::=
				template_call:tc block_body:b {: RESULT = b; sho_block_value_set_template_call(RESULT, tc); :}
			|	                 block_body:b {: RESULT = b; :}
			;


list_value ::=
				LBRACE values:el RBRACE {: RESULT=el; :}
			;


template_call ::=
				ID:i LPARREN           RPARREN {: RESULT = sho_template_call_new(i);  $cup.create.token$ cat_unref(RESULT); :}
			|	ID:i LPARREN values:el RPARREN {: RESULT = sho_template_call_new(i); sho_template_call_set_argument_list(RESULT, el);  $cup.create.token$ cat_unref(RESULT); :}
			;
			
block_body ::=
				LBRACE                    RBRACE {: RESULT = sho_block_value_new(); $cup.create.token$ cat_unref(RESULT); :}
			|	LBRACE reference_block:nb RBRACE {: RESULT = nb; :}
			;





values ::=
				values:el COMMA value:e {: RESULT=el; sho_list_value_add_value(RESULT, e); :}
			|	value:e {: RESULT = sho_list_value_new(); sho_list_value_add_value(RESULT, e); $cup.create.token$ cat_unref(RESULT); :}
			;
			
			
value ::=
				block_value:s {: RESULT=SHO_IVALUE(s); :}
			|	list_value:s {: RESULT=SHO_IVALUE(s); :}
			|	simple_value:v {: RESULT=SHO_IVALUE(v); :}
			;
			

simple_value ::=
			  STRING:s {:
			  	RESULT = sho_simple_value_new_string(s);
			  	$cup.create.token$
			  	cat_unref(RESULT);
			  :}
			| NUMBER:s {:
				RESULT = sho_simple_value_new_string(s);
				$cup.create.token$
				cat_unref(RESULT);
			:}
			| NIL {:
				RESULT = sho_simple_value_new_string(NULL);
				$cup.create.token$
				cat_unref(RESULT);
			:}
			;